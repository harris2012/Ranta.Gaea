// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Ranta.Gaea.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\BlueWindWorkspace\Ranta\MainLine\Application\Gaea\Ranta.Gaea\Template\CSharpMvcProjectTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class CSharpMvcProjectTemplate : CSharpMvcProjectTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "D:\BlueWindWorkspace\Ranta\MainLine\Application\Gaea\Ranta.Gaea\Template\CSharpMvcProjectTemplate.tt"

    if(this.Project != null)
    {

            
            #line default
            #line hidden
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""12.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>");
            
            #line 19 "D:\BlueWindWorkspace\Ranta\MainLine\Application\Gaea\Ranta.Gaea\Template\CSharpMvcProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Project.Guid.ToString("B").ToUpper()));
            
            #line default
            #line hidden
            this.Write("</ProjectGuid>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae" +
                    "04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library</" +
                    "OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNam" +
                    "espace>");
            
            #line 23 "D:\BlueWindWorkspace\Ranta\MainLine\Application\Gaea\Ranta.Gaea\Template\CSharpMvcProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Project.Name));
            
            #line default
            #line hidden
            this.Write("</RootNamespace>\r\n    <AssemblyName>");
            
            #line 24 "D:\BlueWindWorkspace\Ranta\MainLine\Application\Gaea\Ranta.Gaea\Template\CSharpMvcProjectTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Project.Name));
            
            #line default
            #line hidden
            this.Write("</AssemblyName>\r\n    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\r\n    <" +
                    "MvcBuildViews>false</MvcBuildViews>\r\n    <UseIISExpress>true</UseIISExpress>\r\n  " +
                    "  <IISExpressSSLPort />\r\n    <IISExpressAnonymousAuthentication />\r\n    <IISExpr" +
                    "essWindowsAuthentication />\r\n    <IISExpressUseClassicPipelineMode />\r\n    <UseG" +
                    "lobalApplicationHostFile />\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$" +
                    "(Configuration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n    <DebugSymbols>true</Debug" +
                    "Symbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <" +
                    "OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>" +
                    "\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  <" +
                    "/PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configuration)|$(Platform)\' == " +
                    "\'Release|AnyCPU\' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Opt" +
                    "imize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineCon" +
                    "stants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLeve" +
                    "l>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.CSharp\"" +
                    " />\r\n    <Reference Include=\"Microsoft.Web.Infrastructure, Version=1.0.0.0, Cult" +
                    "ure=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\r\n    " +
                    "  <Private>True</Private>\r\n      <HintPath>..\\packages\\Microsoft.Web.Infrastruct" +
                    "ure.1.0.0.0\\lib\\net40\\Microsoft.Web.Infrastructure.dll</HintPath>\r\n    </Referen" +
                    "ce>\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Data\" />" +
                    "\r\n    <Reference Include=\"System.Drawing\" />\r\n    <Reference Include=\"System.Web" +
                    ".DynamicData\" />\r\n    <Reference Include=\"System.Web.Entity\" />\r\n    <Reference " +
                    "Include=\"System.Web.ApplicationServices\" />\r\n    <Reference Include=\"System.Comp" +
                    "onentModel.DataAnnotations\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Re" +
                    "ference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Syst" +
                    "em.Web.Helpers, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e3" +
                    "5, processorArchitecture=MSIL\">\r\n      <SpecificVersion>False</SpecificVersion>\r" +
                    "\n      <HintPath>..\\packages\\Microsoft.AspNet.WebPages.3.2.3\\lib\\net45\\System.We" +
                    "b.Helpers.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System.Web.M" +
                    "vc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processor" +
                    "Architecture=MSIL\">\r\n      <SpecificVersion>False</SpecificVersion>\r\n      <Hint" +
                    "Path>..\\packages\\Microsoft.AspNet.Mvc.5.2.3\\lib\\net45\\System.Web.Mvc.dll</HintPa" +
                    "th>\r\n    </Reference>\r\n    <Reference Include=\"System.Web.Razor, Version=3.0.0.0" +
                    ", Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">" +
                    "\r\n      <SpecificVersion>False</SpecificVersion>\r\n      <HintPath>..\\packages\\Mi" +
                    "crosoft.AspNet.Razor.3.2.3\\lib\\net45\\System.Web.Razor.dll</HintPath>\r\n    </Refe" +
                    "rence>\r\n    <Reference Include=\"System.Web.WebPages, Version=3.0.0.0, Culture=ne" +
                    "utral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\r\n      <Spe" +
                    "cificVersion>False</SpecificVersion>\r\n      <HintPath>..\\packages\\Microsoft.AspN" +
                    "et.WebPages.3.2.3\\lib\\net45\\System.Web.WebPages.dll</HintPath>\r\n    </Reference>" +
                    "\r\n    <Reference Include=\"System.Web.WebPages.Deployment, Version=3.0.0.0, Cultu" +
                    "re=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\r\n     " +
                    " <SpecificVersion>False</SpecificVersion>\r\n      <HintPath>..\\packages\\Microsoft" +
                    ".AspNet.WebPages.3.2.3\\lib\\net45\\System.Web.WebPages.Deployment.dll</HintPath>\r\n" +
                    "    </Reference>\r\n    <Reference Include=\"System.Web.WebPages.Razor, Version=3.0" +
                    ".0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MS" +
                    "IL\">\r\n      <SpecificVersion>False</SpecificVersion>\r\n      <HintPath>..\\package" +
                    "s\\Microsoft.AspNet.WebPages.3.2.3\\lib\\net45\\System.Web.WebPages.Razor.dll</HintP" +
                    "ath>\r\n    </Reference>\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Refere" +
                    "nce Include=\"System.Web\" />\r\n    <Reference Include=\"System.Web.Extensions\" />\r\n" +
                    "    <Reference Include=\"System.Web.Abstractions\" />\r\n    <Reference Include=\"Sys" +
                    "tem.Web.Routing\" />\r\n    <Reference Include=\"System.Xml\" />\r\n    <Reference Incl" +
                    "ude=\"System.Configuration\" />\r\n    <Reference Include=\"System.Web.Services\" />\r\n" +
                    "    <Reference Include=\"System.EnterpriseServices\" />\r\n    <Reference Include=\"S" +
                    "ystem.Net.Http\">\r\n    </Reference>\r\n    <Reference Include=\"System.Net.Http.WebR" +
                    "equest\">\r\n    </Reference>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=" +
                    "\"Controllers\\HomeController.cs\" />\r\n    <Compile Include=\"Global.asax.cs\">\r\n    " +
                    "  <DependentUpon>Global.asax</DependentUpon>\r\n    </Compile>\r\n    <Compile Inclu" +
                    "de=\"Properties\\AssemblyInfo.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile " +
                    "Include=\"App_Start\\FilterConfig.cs\" />\r\n    <Compile Include=\"App_Start\\RouteCon" +
                    "fig.cs\" />\r\n    <Content Include=\"Global.asax\" />\r\n    <Content Include=\"Web.con" +
                    "fig\" />\r\n    <Content Include=\"Web.Debug.config\">\r\n      <DependentUpon>Web.conf" +
                    "ig</DependentUpon>\r\n    </Content>\r\n    <Content Include=\"Web.Release.config\">\r\n" +
                    "      <DependentUpon>Web.config</DependentUpon>\r\n    </Content>\r\n    <Content In" +
                    "clude=\"Views\\Web.config\" />\r\n    <Content Include=\"Views\\Shared\\_Layout.cshtml\" " +
                    "/>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"App_Data\\\" />\r\n    <Fold" +
                    "er Include=\"Models\\\" />\r\n    <Folder Include=\"Scripts\\\" />\r\n  </ItemGroup>\r\n  <I" +
                    "temGroup>\r\n    <Content Include=\"packages.config\" />\r\n  </ItemGroup>\r\n  <ItemGro" +
                    "up>\r\n    <Content Include=\"Views\\_ViewStart.cshtml\" />\r\n  </ItemGroup>\r\n  <ItemG" +
                    "roup>\r\n    <Content Include=\"Views\\Home\\Index.cshtml\" />\r\n  </ItemGroup>\r\n  <Pro" +
                    "pertyGroup>\r\n    <VisualStudioVersion Condition=\"\'$(VisualStudioVersion)\' == \'\'\"" +
                    ">10.0</VisualStudioVersion>\r\n    <VSToolsPath Condition=\"\'$(VSToolsPath)\' == \'\'\"" +
                    ">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSTo" +
                    "olsPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSh" +
                    "arp.targets\" />\r\n  <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.Web" +
                    "Application.targets\" Condition=\"\'$(VSToolsPath)\' != \'\'\" />\r\n  <Import Project=\"$" +
                    "(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft" +
                    ".WebApplication.targets\" Condition=\"false\" />\r\n  <Target Name=\"MvcBuildViews\" Af" +
                    "terTargets=\"AfterBuild\" Condition=\"\'$(MvcBuildViews)\'==\'true\'\">\r\n    <AspNetComp" +
                    "iler VirtualPath=\"temp\" PhysicalPath=\"$(WebProjectOutputDir)\" />\r\n  </Target>\r\n " +
                    " <ProjectExtensions>\r\n    <VisualStudio>\r\n      <FlavorProperties GUID=\"{349c585" +
                    "1-65df-11da-9384-00065b846f21}\">\r\n        <WebProjectProperties>\r\n          <Use" +
                    "IIS>True</UseIIS>\r\n          <AutoAssignPort>True</AutoAssignPort>\r\n          <D" +
                    "evelopmentServerPort>20226</DevelopmentServerPort>\r\n          <DevelopmentServer" +
                    "VPath>/</DevelopmentServerVPath>\r\n          <IISUrl>http://localhost:20226/</IIS" +
                    "Url>\r\n          <NTLMAuthentication>False</NTLMAuthentication>\r\n          <UseCu" +
                    "stomServer>False</UseCustomServer>\r\n          <CustomServerUrl>\r\n          </Cus" +
                    "tomServerUrl>\r\n          <SaveServerSettingsInUserFile>False</SaveServerSettings" +
                    "InUserFile>\r\n        </WebProjectProperties>\r\n      </FlavorProperties>\r\n    </V" +
                    "isualStudio>\r\n  </ProjectExtensions>\r\n  <!-- To modify your build process, add y" +
                    "our task inside one of the targets below and uncomment it. \r\n       Other simila" +
                    "r extension points exist, see Microsoft.Common.targets.\r\n  <Target Name=\"BeforeB" +
                    "uild\">\r\n  </Target>\r\n  <Target Name=\"AfterBuild\">\r\n  </Target> -->\r\n</Project>\r\n" +
                    "");
            
            #line 174 "D:\BlueWindWorkspace\Ranta\MainLine\Application\Gaea\Ranta.Gaea\Template\CSharpMvcProjectTemplate.tt"

    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class CSharpMvcProjectTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
